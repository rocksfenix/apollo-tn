type Course {
  _id: ID!
  author: User
  title: String
  slug: String
  description: String
  isPublished: Boolean
  isRecording: Boolean
  serieType: String
  synopsis: String
  trailer: String
  imageSynopsis: ImageSizes
  cover: ImageSizes
  level: String
  firstLessonSlug: String
  category: String
  tags: [String]
  tech: String
  version: Int
  techVersion: String
  duration: String
  role: String
  color: String
  lessons: [Lesson]
  createdAt: String
  updatedAt: String
}

input CourseCreate {
  title: String!
  description: String
  isPublished: Boolean
  isRecording: Boolean
  serieType: String
  synopsis: String
  trailer: String
  level: String
  firstLessonSlug: String
  category: String
  tags: [String]
  tech: String
  version: Int
  techVersion: String
  duration: String
  role: String
  color: String
  lessons: [String]
}

input CourseSet {
  _id: ID
  title: String
  description: String
  isPublished: Boolean
  isRecording: Boolean
  serieType: String
  synopsis: String
  trailer: String
  level: String
  firstLessonSlug: String
  category: String
  tags: [String]
  tech: String
  version: Int
  techVersion: String
  duration: String
  role: String
  color: String
  lessons: [String]
}

type CoursesResponse {
  courses: [Course]
  total: Int
}

type Query {
  courses: [Course!]!
  allCourses(first: Int, skip: Int, text: String): CoursesResponse
  course(slug: String!): Course!
}

type Mutation {
  courseCreate(input: CourseCreate): Course
  courseUpdate(input: CourseSet): Course
  courseDelete(_id: ID!): Course
}