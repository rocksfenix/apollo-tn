type Card {
  brand: String
  country: String
  last4: String
}

type User {
  _id: ID!
  fullname: String
  slug: String
  email: String
  username: String
  role: String
  avatar: ImageSizes
  status: String
  tags: [String]

  lastLoggin: String

  # Subscription
  subscriptionStatus: String
  canceled_at: Float
  cancel_at_period_end: Boolean
  current_period_end: Float
  defaultCard: Card

  acceptTermsAndPrivacy: Boolean
  acceptTermsAndPrivacyUpdated: String
  emailConfirmed: Boolean
  createdAt: String
  updatedAt: String

  isConnected: Boolean,
  connectionDate: String,
  hasConversationActive: Boolean
  conversationChanged: String
  agentChat: String
  conversationsActives: Int

  # Statistics
  countViewPro: Float
  countViewSub: Float
  countAttemptsPaymentFailed: Float
}

# Se usa al actualizar un usuario
input UserSet {
  _id: ID
  username: String
  fullname: String
  email: String
  password: String
  acceptTermsAndPrivacy: Boolean
  status: String
  hasConversationActive: Boolean
  conversationChanged: String
}

type UsersResponse {
  users: [User]
  total: Int
}

type Query {
  user(_id: ID!): User
  userSelf: User
  allUsers(first: Int, skip: Int, text: String): UsersResponse
}

type Mutation {
  userUpdate(input: UserSet!): User
  userDelete(_id: ID!): User
  online: String
  uploadAvatar (file: Upload!, userId: ID): User
}

type Connection {
  status: Boolean
  user: User
}

type Subscription {
  # Cuando un usuario se conecta o desconecta
  # Es disparado por Websockets
  onChangeConnection: Connection
}
