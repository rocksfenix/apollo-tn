type ImageSizes {
  s30: String
  s50: String
  s100: String
  s300: String
  s500: String
  s800: String
  s1000: String
}

type Lesson {
  _id: ID!
  title: String
  slug: String
  synopsis: String
  transcription: String
  screenshot: ImageSizes
  tech: String
  techVersion: String
  lessonVersion: Int
  videoSource: String
  tags: [String]
  duration: String
  claps: Int
  comments: [Comment]
  author: User
  role: String
  isPublished: Boolean
  isTranscriptionPublic: Boolean
  isWatched: Boolean
  createdAt: String
  updatedAt: String
  courseSlug: String
}

input LessonCreate {
  # author: String!  # <==  El id biene del token
  title: String!
  courseSlug: String
  synopsis: String
  transcription: String
  # screenshot: ImageSizes Se ejecuta desde el resolver lessonUploadScreenshot
  tech: String
  techVersion: String
  lessonVersion: Int
  videoSource: String
  tags: [String]
  duration: String
  # claps: Int
  # comments: [Comment]!
  role: String
  isPublished: Boolean
  isTranscriptionPublic: Boolean
  # createdAt: String
  # updatedAt: String
}

input LessonSet {
  _id: ID!
  title: String
  courseSlug: String
  slug: String
  synopsis: String
  transcription: String
  # screenshot: ImageSizes Se ejecuta desde el resolver lessonUploadScreenshot
  tech: String
  techVersion: String
  lessonVersion: Int
  videoSource: String
  tags: [String]
  duration: String
  # claps: Int
  # comments: [Comment]! Los comments bienen del resolver commentsByLesson
  role: String
  isPublished: Boolean
  isTranscriptionPublic: Boolean
  # createdAt: String
  # updatedAt: String
}

type LessonsResponse {
  lessons: [Lesson]
  total: Int
}

type Query {
  lessons: [Lesson]
  allLessons(first: Int, skip: Int, text: String): LessonsResponse
  lesson(slug: String!): Lesson!
}

type Mutation {
  lessonCreate(input: LessonCreate): Lesson
  lessonUpdate(input: LessonSet): Lesson
  lessonDelete(_id: ID!): Lesson
}