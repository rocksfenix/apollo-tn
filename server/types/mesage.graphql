type Message {
  _id: ID!
  text: String
  sender: String
  receiver: String
  createdAt: String
}

type closeConvesation {
  user: User,
  code: String
}

type Subscription {
  newMessage: Message

  # Retorna el usuario que solicita el chat enformato de string
  newChat: User!

  # Cuando un agente se pone como disponible
  agentConnected: User

  # Se dispara cuando se termina la session
  closeConvesation: closeConvesation
}

type AgentAvailableResponse {
  conversationTicket: String,
  agent: User
}

type Query {
  messages(sender: String!, receiver: String!, first: Int, skip: Int): [Message]!

  chats(status: String): [User]

  # Revisa si hay algun agente conectado para chatear
  # Se envia si tiene conversaciones activas
  agentAvailable: AgentAvailableResponse
}

type Mutation {
  messageCreate(text: String!, receiver: ID!): Message

  # El agente disponible y el ticket al que esara
  # ligada la conversacion
  newChat(agent: ID!, ticket: ID!): String

  # Cuando un usuario se conecta o desconecta como disponible
  availability(connection: Boolean!): String!

  # si ed admin toma el id pasado por parametro de lo contrario
  # toma el user.sub
  # Cuando se sierraLa conversacion
  closeChat(_id: ID): User
}
